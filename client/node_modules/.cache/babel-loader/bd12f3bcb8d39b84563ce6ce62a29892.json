{"ast":null,"code":"var querystring = require('querystring');\n\nvar request = require('request');\n\nvar endpoints = require('./endpoints');\n/**\n * Encodes object as a querystring, to be used as the suffix of request URLs.\n * @param  {Object} obj\n * @return {String}\n */\n\n\nexports.makeQueryString = function (obj) {\n  var qs = querystring.stringify(obj);\n  qs = qs.replace(/\\!/g, \"%21\").replace(/\\'/g, \"%27\").replace(/\\(/g, \"%28\").replace(/\\)/g, \"%29\").replace(/\\*/g, \"%2A\");\n  return qs;\n};\n/**\n * For each `/:param` fragment in path, move the value in params\n * at that key to path. If the key is not found in params, throw.\n * Modifies both params and path values.\n *\n * @param  {Objet} params  Object used to build path.\n * @param  {String} path   String to transform.\n * @return {Undefined}\n *\n */\n\n\nexports.moveParamsIntoPath = function (params, path) {\n  var rgxParam = /\\/:(\\w+)/g;\n  var missingParamErr = null;\n  path = path.replace(rgxParam, function (hit) {\n    var paramName = hit.slice(2);\n    var suppliedVal = params[paramName];\n\n    if (!suppliedVal) {\n      throw new Error('Twit: Params object is missing a required parameter for this request: `' + paramName + '`');\n    }\n\n    var retVal = '/' + suppliedVal;\n    delete params[paramName];\n    return retVal;\n  });\n  return path;\n};\n/**\n * When Twitter returns a response that looks like an error response,\n * use this function to attach the error info in the response body to `err`.\n *\n * @param  {Error} err   Error instance to which body info will be attached\n * @param  {Object} body JSON object that is the deserialized HTTP response body received from Twitter\n * @return {Undefined}\n */\n\n\nexports.attachBodyInfoToError = function (err, body) {\n  err.twitterReply = body;\n\n  if (!body) {\n    return;\n  }\n\n  if (body.error) {\n    // the body itself is an error object\n    err.message = body.error;\n    err.allErrors = err.allErrors.concat([body]);\n  } else if (body.errors && body.errors.length) {\n    // body contains multiple error objects\n    err.message = body.errors[0].message;\n    err.code = body.errors[0].code;\n    err.allErrors = err.allErrors.concat(body.errors);\n  }\n};\n\nexports.makeTwitError = function (message) {\n  var err = new Error();\n\n  if (message) {\n    err.message = message;\n  }\n\n  err.code = null;\n  err.allErrors = [];\n  err.twitterReply = null;\n  return err;\n};\n/**\n * Get a bearer token for OAuth2\n * @param  {String}   consumer_key\n * @param  {String}   consumer_secret\n * @param  {Function} cb\n *\n * Calls `cb` with Error, String\n *\n * Error (if it exists) is guaranteed to be Twit error-formatted.\n * String (if it exists) is the bearer token received from Twitter.\n */\n\n\nexports.getBearerToken = function (consumer_key, consumer_secret, cb) {\n  // use OAuth 2 for app-only auth (Twitter requires this)\n  // get a bearer token using our app's credentials\n  var b64Credentials = new Buffer(consumer_key + ':' + consumer_secret).toString('base64');\n  request.post({\n    url: endpoints.API_HOST + 'oauth2/token',\n    headers: {\n      'Authorization': 'Basic ' + b64Credentials,\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    },\n    body: 'grant_type=client_credentials',\n    json: true\n  }, function (err, res, body) {\n    if (err) {\n      var error = exports.makeTwitError(err.toString());\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if (!body) {\n      var error = exports.makeTwitError('Not valid reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if (body.token_type !== 'bearer') {\n      var error = exports.makeTwitError('Unexpected reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    return cb(err, body.access_token);\n  });\n};","map":{"version":3,"sources":["/Users/kylelong/corkedup/node_modules/twit/lib/helpers.js"],"names":["querystring","require","request","endpoints","exports","makeQueryString","obj","qs","stringify","replace","moveParamsIntoPath","params","path","rgxParam","missingParamErr","hit","paramName","slice","suppliedVal","Error","retVal","attachBodyInfoToError","err","body","twitterReply","error","message","allErrors","concat","errors","length","code","makeTwitError","getBearerToken","consumer_key","consumer_secret","cb","b64Credentials","Buffer","toString","post","url","API_HOST","headers","json","res","token_type","access_token"],"mappings":"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","sourcesContent":["var querystring = require('querystring');\nvar request = require('request');\n\nvar endpoints = require('./endpoints');\n\n/**\n * Encodes object as a querystring, to be used as the suffix of request URLs.\n * @param  {Object} obj\n * @return {String}\n */\nexports.makeQueryString = function (obj) {\n  var qs = querystring.stringify(obj)\n  qs = qs.replace(/\\!/g, \"%21\")\n         .replace(/\\'/g, \"%27\")\n         .replace(/\\(/g, \"%28\")\n         .replace(/\\)/g, \"%29\")\n         .replace(/\\*/g, \"%2A\");\n  return qs\n}\n\n/**\n * For each `/:param` fragment in path, move the value in params\n * at that key to path. If the key is not found in params, throw.\n * Modifies both params and path values.\n *\n * @param  {Objet} params  Object used to build path.\n * @param  {String} path   String to transform.\n * @return {Undefined}\n *\n */\nexports.moveParamsIntoPath = function (params, path) {\n  var rgxParam = /\\/:(\\w+)/g\n  var missingParamErr = null\n\n  path = path.replace(rgxParam, function (hit) {\n    var paramName = hit.slice(2)\n    var suppliedVal = params[paramName]\n    if (!suppliedVal) {\n      throw new Error('Twit: Params object is missing a required parameter for this request: `'+paramName+'`')\n    }\n    var retVal = '/' + suppliedVal\n    delete params[paramName]\n    return retVal\n  })\n  return path\n}\n\n/**\n * When Twitter returns a response that looks like an error response,\n * use this function to attach the error info in the response body to `err`.\n *\n * @param  {Error} err   Error instance to which body info will be attached\n * @param  {Object} body JSON object that is the deserialized HTTP response body received from Twitter\n * @return {Undefined}\n */\nexports.attachBodyInfoToError = function (err, body) {\n  err.twitterReply = body;\n  if (!body) {\n    return\n  }\n  if (body.error) {\n    // the body itself is an error object\n    err.message = body.error\n    err.allErrors = err.allErrors.concat([body])\n  } else if (body.errors && body.errors.length) {\n    // body contains multiple error objects\n    err.message = body.errors[0].message;\n    err.code = body.errors[0].code;\n    err.allErrors = err.allErrors.concat(body.errors)\n  }\n}\n\nexports.makeTwitError = function (message) {\n  var err = new Error()\n  if (message) {\n    err.message = message\n  }\n  err.code = null\n  err.allErrors = []\n  err.twitterReply = null\n  return err\n}\n\n/**\n * Get a bearer token for OAuth2\n * @param  {String}   consumer_key\n * @param  {String}   consumer_secret\n * @param  {Function} cb\n *\n * Calls `cb` with Error, String\n *\n * Error (if it exists) is guaranteed to be Twit error-formatted.\n * String (if it exists) is the bearer token received from Twitter.\n */\nexports.getBearerToken = function (consumer_key, consumer_secret, cb) {\n  // use OAuth 2 for app-only auth (Twitter requires this)\n  // get a bearer token using our app's credentials\n  var b64Credentials = new Buffer(consumer_key + ':' + consumer_secret).toString('base64');\n  request.post({\n    url: endpoints.API_HOST + 'oauth2/token',\n    headers: {\n      'Authorization': 'Basic ' + b64Credentials,\n      'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8'\n    },\n    body: 'grant_type=client_credentials',\n    json: true,\n  }, function (err, res, body) {\n    if (err) {\n      var error = exports.makeTwitError(err.toString());\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if ( !body ) {\n      var error = exports.makeTwitError('Not valid reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    if (body.token_type !== 'bearer') {\n      var error = exports.makeTwitError('Unexpected reply from Twitter upon obtaining bearer token');\n      exports.attachBodyInfoToError(error, body);\n      return cb(error, body, res);\n    }\n\n    return cb(err, body.access_token);\n  })\n}\n"]},"metadata":{},"sourceType":"script"}