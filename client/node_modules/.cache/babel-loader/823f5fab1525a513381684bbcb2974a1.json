{"ast":null,"code":"//\n//  Parser - for Twitter Streaming API\n//\nvar util = require('util'),\n    EventEmitter = require('events').EventEmitter;\n\nvar Parser = module.exports = function () {\n  this.message = '';\n  EventEmitter.call(this);\n};\n\nutil.inherits(Parser, EventEmitter);\n\nParser.prototype.parse = function (chunk) {\n  this.message += chunk;\n  chunk = this.message;\n  var size = chunk.length,\n      start = 0,\n      offset = 0,\n      curr,\n      next;\n\n  while (offset < size) {\n    curr = chunk[offset];\n    next = chunk[offset + 1];\n\n    if (curr === '\\r' && next === '\\n') {\n      var piece = chunk.slice(start, offset);\n      start = offset += 2;\n\n      if (!piece.length) {\n        continue;\n      } //empty object\n\n\n      if (piece === 'Exceeded connection limit for user') {\n        this.emit('connection-limit-exceeded', new Error('Twitter says: ' + piece + '. Only instantiate one stream per set of credentials.'));\n        continue;\n      }\n\n      try {\n        var msg = JSON.parse(piece);\n      } catch (err) {\n        this.emit('error', new Error('Error parsing twitter reply: `' + piece + '`, error message `' + err + '`'));\n      } finally {\n        if (msg) this.emit('element', msg);\n        continue;\n      }\n    }\n\n    offset++;\n  }\n\n  this.message = chunk.slice(start, size);\n};","map":{"version":3,"sources":["/Users/kylelong/corkedup/node_modules/twit/lib/parser.js"],"names":["util","require","EventEmitter","Parser","module","exports","message","call","inherits","prototype","parse","chunk","size","length","start","offset","curr","next","piece","slice","emit","Error","msg","JSON","err"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACIC,YAAY,GAAGD,OAAO,CAAC,QAAD,CAAP,CAAkBC,YADrC;;AAGA,IAAIC,MAAM,GAAGC,MAAM,CAACC,OAAP,GAAiB,YAAa;AACzC,OAAKC,OAAL,GAAe,EAAf;AAEAJ,EAAAA,YAAY,CAACK,IAAb,CAAkB,IAAlB;AACD,CAJD;;AAMAP,IAAI,CAACQ,QAAL,CAAcL,MAAd,EAAsBD,YAAtB;;AAEAC,MAAM,CAACM,SAAP,CAAiBC,KAAjB,GAAyB,UAAUC,KAAV,EAAiB;AACxC,OAAKL,OAAL,IAAgBK,KAAhB;AACAA,EAAAA,KAAK,GAAG,KAAKL,OAAb;AAEA,MAAIM,IAAI,GAAGD,KAAK,CAACE,MAAjB;AAAA,MACIC,KAAK,GAAG,CADZ;AAAA,MAEIC,MAAM,GAAG,CAFb;AAAA,MAGIC,IAHJ;AAAA,MAIIC,IAJJ;;AAMA,SAAOF,MAAM,GAAGH,IAAhB,EAAsB;AACpBI,IAAAA,IAAI,GAAGL,KAAK,CAACI,MAAD,CAAZ;AACAE,IAAAA,IAAI,GAAGN,KAAK,CAACI,MAAM,GAAG,CAAV,CAAZ;;AAEA,QAAIC,IAAI,KAAK,IAAT,IAAiBC,IAAI,KAAK,IAA9B,EAAoC;AAClC,UAAIC,KAAK,GAAGP,KAAK,CAACQ,KAAN,CAAYL,KAAZ,EAAmBC,MAAnB,CAAZ;AACAD,MAAAA,KAAK,GAAGC,MAAM,IAAI,CAAlB;;AAEA,UAAI,CAACG,KAAK,CAACL,MAAX,EAAmB;AAAE;AAAW,OAJE,CAID;;;AAEjC,UAAIK,KAAK,KAAK,oCAAd,EAAoD;AAClD,aAAKE,IAAL,CAAU,2BAAV,EACU,IAAIC,KAAJ,CAAU,mBAAmBH,KAAnB,GAA2B,uDAArC,CADV;AAEA;AACD;;AAED,UAAI;AACF,YAAII,GAAG,GAAGC,IAAI,CAACb,KAAL,CAAWQ,KAAX,CAAV;AACD,OAFD,CAEE,OAAOM,GAAP,EAAY;AACZ,aAAKJ,IAAL,CAAU,OAAV,EAAmB,IAAIC,KAAJ,CAAU,mCAAiCH,KAAjC,GAAuC,oBAAvC,GAA4DM,GAA5D,GAAgE,GAA1E,CAAnB;AACD,OAJD,SAIU;AACR,YAAIF,GAAJ,EACE,KAAKF,IAAL,CAAU,SAAV,EAAqBE,GAArB;AAEF;AACD;AACF;;AACDP,IAAAA,MAAM;AACP;;AAED,OAAKT,OAAL,GAAeK,KAAK,CAACQ,KAAN,CAAYL,KAAZ,EAAmBF,IAAnB,CAAf;AACD,CAzCD","sourcesContent":["//\n//  Parser - for Twitter Streaming API\n//\nvar util = require('util')\n  , EventEmitter = require('events').EventEmitter;\n\nvar Parser = module.exports = function ()  {\n  this.message = ''\n\n  EventEmitter.call(this);\n};\n\nutil.inherits(Parser, EventEmitter);\n\nParser.prototype.parse = function (chunk) {\n  this.message += chunk;\n  chunk = this.message;\n\n  var size = chunk.length\n    , start = 0\n    , offset = 0\n    , curr\n    , next;\n\n  while (offset < size) {\n    curr = chunk[offset];\n    next = chunk[offset + 1];\n\n    if (curr === '\\r' && next === '\\n') {\n      var piece = chunk.slice(start, offset);\n      start = offset += 2;\n\n      if (!piece.length) { continue; } //empty object\n\n      if (piece === 'Exceeded connection limit for user') {\n        this.emit('connection-limit-exceeded',\n                  new Error('Twitter says: ' + piece + '. Only instantiate one stream per set of credentials.'));\n        continue;\n      }\n\n      try {\n        var msg = JSON.parse(piece)\n      } catch (err) {\n        this.emit('error', new Error('Error parsing twitter reply: `'+piece+'`, error message `'+err+'`'));\n      } finally {\n        if (msg)\n          this.emit('element', msg)\n\n        continue\n      }\n    }\n    offset++;\n  }\n\n  this.message = chunk.slice(start, size);\n};\n"]},"metadata":{},"sourceType":"script"}