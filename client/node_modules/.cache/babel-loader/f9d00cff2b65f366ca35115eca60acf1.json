{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../base/utils\");\n\nvar TweetsClient =\n/** @class */\nfunction () {\n  function TweetsClient(transport) {\n    if (!transport) {\n      throw Error('Transport class needs to be provided.');\n    }\n\n    this.transport = transport;\n  }\n  /**\n   * Retrieve the identified Collection, presented as a list of the Tweets curated within. The response structure of this method differs significantly from timelines you  may be used to working with elsewhere in the Twitter API.To navigate a Collection,  use the position object of a response, which includes attributes for max_position,  min_position, and was_truncated. was_truncated indicates whether additional  Tweets exist in the collection outside of the range of the current request.  To retrieve Tweets further back in time, use the value of min_position found  in the current response as the max_position parameter in the next call to this endpoint.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-entries\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsEntries = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/collections/entries.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Find Collections created by a specific user or containing a  specific curated Tweet.Results are organized in a cursored collection.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-list\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsList = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/collections/list.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Retrieve information associated with a specific Collection.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-show\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsShow = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/collections/show.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Create a Collection owned by the currently authenticated user. The API endpoint may refuse to complete the request if the authenticated  user has exceeded the total number of allowed collections for their account.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-create\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsCreate = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/collections/create.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Permanently delete a Collection owned by the currently authenticated user.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-destroy\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsDestroy = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/collections/destroy.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Add a specified Tweet to a Collection.A collection will store up  to a few thousand Tweets. Adding a Tweet to a collection beyond its  allowed capacity will remove the oldest Tweet in the collection based  on the time it was added to the collection.Use POST collections / entries / curate  to add Tweets to a Collection in bulk.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-add\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsEntriesAdd = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/add.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Curate a Collection by adding or removing Tweets in bulk.  Updates must be limited to 100 cumulative additions or removals per request. Use POST collections / entries / add and POST collections / entries / remove  to add or remove a single Tweet.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-curate\n   */\n\n\n  TweetsClient.prototype.collectionsEntriesCurate = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/curate.json')];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-move\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsEntriesMove = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/move.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Remove the specified Tweet from a Collection.Use POST  collections / entries / curate to remove Tweets from a Collection in bulk.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-remove\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsEntriesRemove = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/remove.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Update information concerning a Collection owned by the currently authenticated user. Partial updates are not currently supported: please provide name, description,  and url whenever using this method. Omitted description or url parameters will  be treated as if an empty string was passed, overwriting  any previously stored value for the Collection.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-update\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.collectionsUpdate = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/collections/update.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a collection of the most recent Tweets and Retweets posted  by the authenticating user and the users they follow. The home timeline is  central to how most users interact with the Twitter service.Up to 800  Tweets are obtainable on the home timeline. It is more volatile for  users that follow many users or follow users who Tweet frequently. See Working with Timelines for instructions on traversing timelines efficiently.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesHomeTimeline = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/home_timeline.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Important notice: On June 19, 2019, we began enforcing a  limit of 100,000 requests per day to the /statuses/mentions_timeline endpoint.  This is in addition to existing user-level rate limits (75 requests / 15-minutes).  This limit is enforced on a per-application basis, meaning that a  single developer app can make up to 100,000 calls during any  single 24-hour period.Returns the 20 most recent mentions  (Tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view  your mentions on twitter.com.This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesMentionsTimeline = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/mentions_timeline.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Important notice: On June 19, 2019, we began enforcing a limit of  100,000 requests per day to the /statuses/user_timeline endpoint,  in addition to existing user-level and app-level rate limits. This limit is applied on a per-application basis, meaning that a single developer app  can make up to 100,000 calls during any single 24-hour period.Returns a collection  of the most recent Tweets posted by the user indicated by the screen_name or  user_id parameters.User timelines belonging to protected users may only be  requested when the authenticated user either \"owns\" the timeline or is an  approved follower of the owner.The timeline returned is the equivalent of  the one seen as a user's profile on Twitter.This method can only return up  to 3,200 of a user's most recent Tweets. Native retweets of other statuses  by the user is included in this total, regardless of whether include_rts  is set to false when requesting this resource.See Working with Timelines  for instructions on traversing timelines.See Embedded Timelines,  Embedded Tweets, and GET statuses/oembed for tools to render  Tweets according to Display Requirements.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesUserTimeline = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/user_timeline.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Note: favorites are now known as likes. Returns the 20 most recent Tweets liked by the authenticating or specified user.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.favoritesList = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/favorites/list.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns fully-hydrated Tweet objects for up to 100 Tweets per request, as specified by comma-separated values passed to the id parameter.This method is especially useful to get the details (hydrate) a collection of Tweet IDs.GET statuses / show / :id is used to retrieve a single Tweet object.There are a few things to note when using this method. You must be following a protected user to be able to see their most recent Tweets. If you don't follow a protected user their status will be removed. The order of Tweet IDs may not match the order of Tweets in the returned array. If a requested Tweet is unknown or deleted, then that Tweet will not be returned in the results list, unless the map parameter is set to true, in which case it will be returned with a value of null. If none of your lookup criteria matches valid Tweet IDs an empty array will be returned for map=false. You are strongly encouraged to use a POST for larger requests.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-lookup\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesLookup = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/lookup.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. This method offers similar data to GET statuses / retweets / :id.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesRetweetersIds = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/retweeters/ids.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a collection of the 100 most recent retweets of the Tweet specified by the id parameter.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets-id\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesRetweetsById = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/retweets/' + parameters.id + '.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns the most recent Tweets authored by the authenticating user  that have been retweeted by others. This timeline is a subset of the user's GET statuses / user_timeline.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesRetweetsOfMe = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/retweets_of_me.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet. See GET statuses / lookup for getting Tweets in bulk (up to 100 per call). See also Embedded Timelines, Embedded Tweets, and GET statuses/oembed for tools to render Tweets according to Display Requirements. About GeoIf there is no geotag for a status, then there will be an  empty <geo></geo> or \"geo\" : {}.  This can only be populated if the user has used the Geotagging API to send a statuses/update. The JSON response mostly uses conventions laid out in GeoJSON.  The coordinates that Twitter renders are reversed from the GeoJSON specification  (GeoJSON specifies a longitude then a latitude, whereas Twitter represents it as  a latitude then a longitude), eg: \"geo\":  { \"type\":\"Point\", \"coordinates\":[37.78029, -122.39697] }\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesShowById = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/show.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Note: favorites are now known as likes.Favorites (likes) the Tweet  specified in the ID parameter as the authenticating user.  Returns the favorite Tweet when successful.The process invoked by  this method is asynchronous. The immediately returned Tweet object may not indicate  the resultant favorited status of the Tweet. A 200 OK response from this method  will indicate whether the intended action was successful or not.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-create\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.favoritesCreate = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/favorites/create.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Note: favorites are now known as likes.Unfavorites (un-likes) the Tweet  specified in the ID parameter as the authenticating user.  Returns the un-liked Tweet when successful.The process invoked by this method is asynchronous.  The immediately returned Tweet object may not indicate the resultant favorited status of the Tweet.  A 200 OK response from this method will indicate whether the intended action was successful or not.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-destroy\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.favoritesDestroy = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/favorites/destroy.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesDestroyById = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/destroy/' + parameters.id + '.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format. The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page. The oEmbed endpoint allows customization of the final appearance of an Embedded Tweet by setting the corresponding properties in HTML markup to b einterpreted by Twitter's JavaScript bundled with the HTML response by default. The format of the returned markup may change over time as Twitter adds new features or adjusts its Tweet representation. The Tweet fallback markup is meant to be cached on your servers for upt o the suggested cache lifetime specified in the cache_age.\n   *\n   * @link https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesOembed = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://publish.twitter.com/oembed' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Retweets a tweet. Returns the original Tweet with Retweet details embedded.Usage Notes: This method is subject to update limits. A HTTP 403 will be returned if this limit as been hit. Twitter will ignore attempts to perform duplicate retweets. The retweet_count will be current as of when the payload is generated and may not reflect the exact count. It is intended as an approximation.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-retweet-id\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesRetweetById = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/retweet/' + parameters.id + '.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Untweets a retweeted status. Returns the original Tweet with Retweet details embedded.Usage Notes: This method is subject to update limits. A HTTP 429 will be returned if this limit has been hit. The untweeted retweet status ID must be authored by the user backing the authentication token. An application must have write privileges to POST. A HTTP 401 will be returned for read-only applications. When passing a source status ID instead of the retweet status ID a HTTP 200 response will be returned with the same Tweet object but no action.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-unretweet-id\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesUnretweetById = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/unretweet/' + parameters.id + '.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Updates the authenticating user's current status, also known as Tweeting. For each update attempt, the update text is compared with the authenticating  user's recent Tweets. Any attempt that would result in duplication will be  blocked, resulting in a 403 error. A user cannot submit the same status twice in a row. While not rate limited by the API, a user is limited in the number of Tweets they  can create at a time. If the number of updates posted by the user reaches the current  allowed limit this method will return an HTTP 403 error.About Geo Any geo-tagging parameters in the update will be ignored if geo_enabled for the user  is false (this is the default setting for all users, unless the user has enabled geolocation in their settings) The number of digits after the decimal separator passed to lat (up to 8) is tracked so that  when the lat is returned in a status object it will have the same number of digits  after the decimal separator. Use a decimal point as the separator (and not a decimal comma) for the latitude and the longitude  - usage of a decimal comma will cause the geo-tagged portion of the status update to be dropped. For JSON, the response mostly uses conventions described in GeoJSON. However,  the geo object coordinates that Twitter renders are reversed from the GeoJSON specification.  GeoJSON specifies a longitude then a latitude, whereas Twitter represents it as a latitude then  a longitude: \"geo\": { \"type\":\"Point\", \"coordinates\":[37.78217, -122.40062] } The coordinates object is replacing the geo object (no deprecation date has been set for the geo  object yet) -- the difference is that the coordinates object, in JSON, is now rendered correctly in GeoJSON. If a place_id is passed into the status update, then that place will be attached  to the status. If no place_id was explicitly provided, but latitude and longitude  are, the API attempts to implicitly provide a place by calling geo/reverse_geocode. Users have the ability to remove all geotags from all their Tweets en masse via the  user settings page. Currently there is no method to remove geotags from individual Tweets.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-update\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.statusesUpdate = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/update.json', parameters)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * Returns a collection of relevant Tweets matching a specified query. Please note that Twitter's search service and, by extension, the  Search API is not meant to be an exhaustive source of Tweets.  Not all Tweets will be indexed or made available via the search interface. To learn how to use Twitter Search effectively, please see the Standard search  operators page for a list of available filter operators. Also, see the Working with  Timelines page to learn best practices for navigating results by since_id and max_id.\n   *\n   * @link https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets\n   * @param parameters\n   */\n\n\n  TweetsClient.prototype.search = function (parameters) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            params = utils_1.createParams(parameters);\n            return [4\n            /*yield*/\n            , this.transport.doGetRequest('https://api.twitter.com/1.1/search/tweets.json' + params)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return TweetsClient;\n}();\n\nexports.default = TweetsClient;","map":{"version":3,"sources":["/Users/kylelong/corkedup/node_modules/twitter-api-client/dist/clients/TweetsClient.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","__generator","body","_","label","sent","t","trys","ops","f","y","g","verb","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","Object","defineProperty","exports","utils_1","require","TweetsClient","transport","Error","prototype","collectionsEntries","parameters","params","_a","createParams","doGetRequest","collectionsList","collectionsShow","collectionsCreate","doPostRequest","collectionsDestroy","collectionsEntriesAdd","collectionsEntriesCurate","collectionsEntriesMove","collectionsEntriesRemove","collectionsUpdate","statusesHomeTimeline","statusesMentionsTimeline","statusesUserTimeline","favoritesList","statusesLookup","statusesRetweetersIds","statusesRetweetsById","id","statusesRetweetsOfMe","statusesShowById","favoritesCreate","favoritesDestroy","statusesDestroyById","statusesOembed","statusesRetweetById","statusesUnretweetById","statusesUpdate","search","default"],"mappings":"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","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utils_1 = require(\"../base/utils\");\nvar TweetsClient = /** @class */ (function () {\n    function TweetsClient(transport) {\n        if (!transport) {\n            throw Error('Transport class needs to be provided.');\n        }\n        this.transport = transport;\n    }\n    /**\n     * Retrieve the identified Collection, presented as a list of the Tweets curated within. The response structure of this method differs significantly from timelines you  may be used to working with elsewhere in the Twitter API.To navigate a Collection,  use the position object of a response, which includes attributes for max_position,  min_position, and was_truncated. was_truncated indicates whether additional  Tweets exist in the collection outside of the range of the current request.  To retrieve Tweets further back in time, use the value of min_position found  in the current response as the max_position parameter in the next call to this endpoint.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-entries\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsEntries = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/collections/entries.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Find Collections created by a specific user or containing a  specific curated Tweet.Results are organized in a cursored collection.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-list\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsList = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/collections/list.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Retrieve information associated with a specific Collection.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/get-collections-show\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsShow = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/collections/show.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Create a Collection owned by the currently authenticated user. The API endpoint may refuse to complete the request if the authenticated  user has exceeded the total number of allowed collections for their account.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-create\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsCreate = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/collections/create.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Permanently delete a Collection owned by the currently authenticated user.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-destroy\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsDestroy = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/collections/destroy.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Add a specified Tweet to a Collection.A collection will store up  to a few thousand Tweets. Adding a Tweet to a collection beyond its  allowed capacity will remove the oldest Tweet in the collection based  on the time it was added to the collection.Use POST collections / entries / curate  to add Tweets to a Collection in bulk.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-add\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsEntriesAdd = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/add.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Curate a Collection by adding or removing Tweets in bulk.  Updates must be limited to 100 cumulative additions or removals per request. Use POST collections / entries / add and POST collections / entries / remove  to add or remove a single Tweet.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-curate\n     */\n    TweetsClient.prototype.collectionsEntriesCurate = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/curate.json')];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-move\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsEntriesMove = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/move.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Remove the specified Tweet from a Collection.Use POST  collections / entries / curate to remove Tweets from a Collection in bulk.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-entries-remove\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsEntriesRemove = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/collections/entries/remove.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Update information concerning a Collection owned by the currently authenticated user. Partial updates are not currently supported: please provide name, description,  and url whenever using this method. Omitted description or url parameters will  be treated as if an empty string was passed, overwriting  any previously stored value for the Collection.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/curate-a-collection/api-reference/post-collections-update\n     * @param parameters\n     */\n    TweetsClient.prototype.collectionsUpdate = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/collections/update.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a collection of the most recent Tweets and Retweets posted  by the authenticating user and the users they follow. The home timeline is  central to how most users interact with the Twitter service.Up to 800  Tweets are obtainable on the home timeline. It is more volatile for  users that follow many users or follow users who Tweet frequently. See Working with Timelines for instructions on traversing timelines efficiently.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-home_timeline\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesHomeTimeline = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/home_timeline.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Important notice: On June 19, 2019, we began enforcing a  limit of 100,000 requests per day to the /statuses/mentions_timeline endpoint.  This is in addition to existing user-level rate limits (75 requests / 15-minutes).  This limit is enforced on a per-application basis, meaning that a  single developer app can make up to 100,000 calls during any  single 24-hour period.Returns the 20 most recent mentions  (Tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view  your mentions on twitter.com.This method can only return up to 800 tweets. See Working with Timelines for instructions on traversing timelines.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-mentions_timeline\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesMentionsTimeline = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/mentions_timeline.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Important notice: On June 19, 2019, we began enforcing a limit of  100,000 requests per day to the /statuses/user_timeline endpoint,  in addition to existing user-level and app-level rate limits. This limit is applied on a per-application basis, meaning that a single developer app  can make up to 100,000 calls during any single 24-hour period.Returns a collection  of the most recent Tweets posted by the user indicated by the screen_name or  user_id parameters.User timelines belonging to protected users may only be  requested when the authenticated user either \"owns\" the timeline or is an  approved follower of the owner.The timeline returned is the equivalent of  the one seen as a user's profile on Twitter.This method can only return up  to 3,200 of a user's most recent Tweets. Native retweets of other statuses  by the user is included in this total, regardless of whether include_rts  is set to false when requesting this resource.See Working with Timelines  for instructions on traversing timelines.See Embedded Timelines,  Embedded Tweets, and GET statuses/oembed for tools to render  Tweets according to Display Requirements.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/timelines/api-reference/get-statuses-user_timeline\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesUserTimeline = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/user_timeline.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Note: favorites are now known as likes. Returns the 20 most recent Tweets liked by the authenticating or specified user.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-favorites-list\n     * @param parameters\n     */\n    TweetsClient.prototype.favoritesList = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/favorites/list.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns fully-hydrated Tweet objects for up to 100 Tweets per request, as specified by comma-separated values passed to the id parameter.This method is especially useful to get the details (hydrate) a collection of Tweet IDs.GET statuses / show / :id is used to retrieve a single Tweet object.There are a few things to note when using this method. You must be following a protected user to be able to see their most recent Tweets. If you don't follow a protected user their status will be removed. The order of Tweet IDs may not match the order of Tweets in the returned array. If a requested Tweet is unknown or deleted, then that Tweet will not be returned in the results list, unless the map parameter is set to true, in which case it will be returned with a value of null. If none of your lookup criteria matches valid Tweet IDs an empty array will be returned for map=false. You are strongly encouraged to use a POST for larger requests.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-lookup\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesLookup = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/lookup.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a collection of up to 100 user IDs belonging to users who have retweeted the Tweet specified by the id parameter. This method offers similar data to GET statuses / retweets / :id.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweeters-ids\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesRetweetersIds = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/retweeters/ids.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a collection of the 100 most recent retweets of the Tweet specified by the id parameter.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets-id\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesRetweetsById = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/retweets/' + parameters.id + '.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns the most recent Tweets authored by the authenticating user  that have been retweeted by others. This timeline is a subset of the user's GET statuses / user_timeline.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-retweets_of_me\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesRetweetsOfMe = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/retweets_of_me.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a single Tweet, specified by the id parameter. The Tweet's author will also be embedded within the Tweet. See GET statuses / lookup for getting Tweets in bulk (up to 100 per call). See also Embedded Timelines, Embedded Tweets, and GET statuses/oembed for tools to render Tweets according to Display Requirements. About GeoIf there is no geotag for a status, then there will be an  empty <geo></geo> or \"geo\" : {}.  This can only be populated if the user has used the Geotagging API to send a statuses/update. The JSON response mostly uses conventions laid out in GeoJSON.  The coordinates that Twitter renders are reversed from the GeoJSON specification  (GeoJSON specifies a longitude then a latitude, whereas Twitter represents it as  a latitude then a longitude), eg: \"geo\":  { \"type\":\"Point\", \"coordinates\":[37.78029, -122.39697] }\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/get-statuses-show-id\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesShowById = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/statuses/show.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Note: favorites are now known as likes.Favorites (likes) the Tweet  specified in the ID parameter as the authenticating user.  Returns the favorite Tweet when successful.The process invoked by  this method is asynchronous. The immediately returned Tweet object may not indicate  the resultant favorited status of the Tweet. A 200 OK response from this method  will indicate whether the intended action was successful or not.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-create\n     * @param parameters\n     */\n    TweetsClient.prototype.favoritesCreate = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/favorites/create.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Note: favorites are now known as likes.Unfavorites (un-likes) the Tweet  specified in the ID parameter as the authenticating user.  Returns the un-liked Tweet when successful.The process invoked by this method is asynchronous.  The immediately returned Tweet object may not indicate the resultant favorited status of the Tweet.  A 200 OK response from this method will indicate whether the intended action was successful or not.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-favorites-destroy\n     * @param parameters\n     */\n    TweetsClient.prototype.favoritesDestroy = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/favorites/destroy.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-destroy-id\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesDestroyById = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/destroy/' + parameters.id + '.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a single Tweet, specified by either a Tweet web URL or the Tweet ID, in an oEmbed-compatible format. The returned HTML snippet will be automatically recognized as an Embedded Tweet when Twitter's widget JavaScript is included on the page. The oEmbed endpoint allows customization of the final appearance of an Embedded Tweet by setting the corresponding properties in HTML markup to b einterpreted by Twitter's JavaScript bundled with the HTML response by default. The format of the returned markup may change over time as Twitter adds new features or adjusts its Tweet representation. The Tweet fallback markup is meant to be cached on your servers for upt o the suggested cache lifetime specified in the cache_age.\n     *\n     * @link https://developer.twitter.com/en/docs/twitter-api/v1/tweets/post-and-engage/api-reference/get-statuses-oembed\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesOembed = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://publish.twitter.com/oembed' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Retweets a tweet. Returns the original Tweet with Retweet details embedded.Usage Notes: This method is subject to update limits. A HTTP 403 will be returned if this limit as been hit. Twitter will ignore attempts to perform duplicate retweets. The retweet_count will be current as of when the payload is generated and may not reflect the exact count. It is intended as an approximation.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-retweet-id\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesRetweetById = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/retweet/' + parameters.id + '.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Untweets a retweeted status. Returns the original Tweet with Retweet details embedded.Usage Notes: This method is subject to update limits. A HTTP 429 will be returned if this limit has been hit. The untweeted retweet status ID must be authored by the user backing the authentication token. An application must have write privileges to POST. A HTTP 401 will be returned for read-only applications. When passing a source status ID instead of the retweet status ID a HTTP 200 response will be returned with the same Tweet object but no action.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-unretweet-id\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesUnretweetById = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/unretweet/' + parameters.id + '.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Updates the authenticating user's current status, also known as Tweeting. For each update attempt, the update text is compared with the authenticating  user's recent Tweets. Any attempt that would result in duplication will be  blocked, resulting in a 403 error. A user cannot submit the same status twice in a row. While not rate limited by the API, a user is limited in the number of Tweets they  can create at a time. If the number of updates posted by the user reaches the current  allowed limit this method will return an HTTP 403 error.About Geo Any geo-tagging parameters in the update will be ignored if geo_enabled for the user  is false (this is the default setting for all users, unless the user has enabled geolocation in their settings) The number of digits after the decimal separator passed to lat (up to 8) is tracked so that  when the lat is returned in a status object it will have the same number of digits  after the decimal separator. Use a decimal point as the separator (and not a decimal comma) for the latitude and the longitude  - usage of a decimal comma will cause the geo-tagged portion of the status update to be dropped. For JSON, the response mostly uses conventions described in GeoJSON. However,  the geo object coordinates that Twitter renders are reversed from the GeoJSON specification.  GeoJSON specifies a longitude then a latitude, whereas Twitter represents it as a latitude then  a longitude: \"geo\": { \"type\":\"Point\", \"coordinates\":[37.78217, -122.40062] } The coordinates object is replacing the geo object (no deprecation date has been set for the geo  object yet) -- the difference is that the coordinates object, in JSON, is now rendered correctly in GeoJSON. If a place_id is passed into the status update, then that place will be attached  to the status. If no place_id was explicitly provided, but latitude and longitude  are, the API attempts to implicitly provide a place by calling geo/reverse_geocode. Users have the ability to remove all geotags from all their Tweets en masse via the  user settings page. Currently there is no method to remove geotags from individual Tweets.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/post-and-engage/api-reference/post-statuses-update\n     * @param parameters\n     */\n    TweetsClient.prototype.statusesUpdate = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.transport.doPostRequest('https://api.twitter.com/1.1/statuses/update.json', parameters)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a collection of relevant Tweets matching a specified query. Please note that Twitter's search service and, by extension, the  Search API is not meant to be an exhaustive source of Tweets.  Not all Tweets will be indexed or made available via the search interface. To learn how to use Twitter Search effectively, please see the Standard search  operators page for a list of available filter operators. Also, see the Working with  Timelines page to learn best practices for navigating results by since_id and max_id.\n     *\n     * @link https://developer.twitter.com/en/docs/tweets/search/api-reference/get-search-tweets\n     * @param parameters\n     */\n    TweetsClient.prototype.search = function (parameters) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = utils_1.createParams(parameters);\n                        return [4 /*yield*/, this.transport.doGetRequest('https://api.twitter.com/1.1/search/tweets.json' + params)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    return TweetsClient;\n}());\nexports.default = TweetsClient;\n"]},"metadata":{},"sourceType":"script"}