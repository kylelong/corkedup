{"ast":null,"code":"var _jsxFileName = \"/Users/kylelong/corkedup/src/components/events/Events.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport EventsHeader from './EventsHeader';\nimport Navigation from '../Navigation';\nimport SideMenu from '../SideMenu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: '25ch'\n    }\n  }\n}));\n\nconst Events = () => {\n  _s();\n\n  // test with zipCode -> cleanUrls with urls array -> promise array with promises containing clean urls\n  // || JSON.parse(window.localStorage.getItem('bars')) !== cleanUrls)\n  const [zipCode, setZipCode] = useState(\"24060\");\n  const [urlData, setUrlData] = useState([]);\n  const [cleanUrls, setCleanUrls] = useState([]);\n  const [zipCodeSave, setZipCodeSave] = useState(false);\n  const [errors, setErrors] = useState({\n    zipcode: \"\"\n  });\n  const classes = useStyles(); // get urls\n\n  useEffect(() => {\n    console.log(\"getting url data...\", zipCode);\n    axios.get(\"/test\", {\n      params: {\n        zipCode: zipCode\n      }\n    }).then(response => {\n      console.log(response.data);\n      setUrlData(response.data);\n    }).catch(error => {\n      console.log(error);\n    }); //#endregion        \n\n    let urls = [];\n    console.log(\"cleaning urls\");\n\n    for (const url of urlData) {\n      let data = cleanUrl(url);\n\n      if (data != null) {\n        urls.push(data);\n      }\n    }\n\n    Promise.all(urls).then(response => {\n      setCleanUrls(response);\n      console.log(response, cleanUrls);\n      let bars = JSON.parse(window.localStorage.getItem('bars')); //console.log(JSON.parse(window.localStorage.getItem('bars')), response);\n      // if( bars === null || bars === undefined || bars.length == 0) {\n      //    // console.log(response);\n      //     window.localStorage.setItem('bars', JSON.stringify(response));\n      //     //console.log(window.localStorage.getItem('bars') );\n      // }\n      // if(response.length > 0 && response !== bars) {\n      //     console.log(response);\n      //     window.localStorage.removeItem('bars');\n      //     window.localStorage.setItem('bars', JSON.stringify(response));\n      // }\n    }).catch(err => {\n      console.log(err);\n    });\n  }, [zipCode]); // clean them \n\n  const cleanUrl = async url => {\n    const response = await axios.get(\"/cleanUrl\", {\n      params: {\n        url: url\n      }\n    });\n    const data = await response.data;\n    return data;\n  };\n\n  const onChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setZipCodeSave(false);\n\n    if (name === \"zipcode\") {\n      if (value.length === 5) {\n        const regEx = /^[0-9]{5}$/;\n\n        if (value.match(regEx)) {\n          console.log(value);\n          setZipCode(value);\n          setErrors(prevErrors => ({ ...prevErrors,\n            zipCode: \"\"\n          }));\n        } else {\n          setErrors(prevErrors => ({ ...prevErrors,\n            zipCode: \"Zipcode must be 5 digits\"\n          }));\n        }\n      }\n    }\n  }; // store all clean urls using cleanUrl()\n  // useEffect(() => {\n  //     let urls = []\n  //     console.log(\"cleaning urls\");\n  //     for(const url of urlData){\n  //         let data = cleanUrl(url);\n  //         if(data != null){\n  //             urls.push(data);\n  //         }\n  //     }\n  //     Promise.all(urls).then((response) => {\n  //         setCleanUrls(response);\n  //         console.log(response, cleanUrls);\n  //         let bars = JSON.parse(window.localStorage.getItem('bars'));\n  //         //console.log(JSON.parse(window.localStorage.getItem('bars')), response);\n  //         // if( bars === null || bars === undefined || bars.length == 0) {\n  //         //    // console.log(response);\n  //         //     window.localStorage.setItem('bars', JSON.stringify(response));\n  //         //     //console.log(window.localStorage.getItem('bars') );\n  //         // }\n  //         // if(response.length > 0 && response !== bars) {\n  //         //     console.log(response);\n  //         //     window.localStorage.removeItem('bars');\n  //         //     window.localStorage.setItem('bars', JSON.stringify(response));\n  //         // }\n  //     }).catch(err => {\n  //         console.log(err);\n  //     })\n  // }, [urlData])\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(EventsHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SideMenu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wineBarsContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        className: classes.root,\n        noValidate: true,\n        autoComplete: \"off\",\n        id: \"zipCodeForm\",\n        onSubmit: e => {\n          e.preventDefault();\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"zipcode\",\n          children: \"Zipcode\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          id: \"outlined-basic\",\n          label: zipCode,\n          variant: \"outlined\",\n          name: \"zipcode\",\n          id: \"zipcode\",\n          placeholder: zipCode,\n          inputProps: {\n            maxLength: 5\n          },\n          onChange: onChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 33\n        }, this), errors.zipcode.length > 0 && /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"error\",\n          children: errors.zipCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 33\n        }, this), zipCodeSave && /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            color: \"green\"\n          },\n          children: \"Zip Code successfully saved.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 37\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: cleanUrls.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this) : cleanUrls.map((url, i) => {\n        return /*#__PURE__*/_jsxDEV(\"p\", {\n          children: url\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Events, \"omBePH1P0+hTy+ZvYnf/0XhzfrY=\", false, function () {\n  return [useStyles];\n});\n\n_c = Events;\nexport default Events;\n\nvar _c;\n\n$RefreshReg$(_c, \"Events\");","map":{"version":3,"sources":["/Users/kylelong/corkedup/src/components/events/Events.js"],"names":["React","useEffect","useState","axios","EventsHeader","Navigation","SideMenu","makeStyles","TextField","useStyles","theme","root","margin","spacing","width","Events","zipCode","setZipCode","urlData","setUrlData","cleanUrls","setCleanUrls","zipCodeSave","setZipCodeSave","errors","setErrors","zipcode","classes","console","log","get","params","then","response","data","catch","error","urls","url","cleanUrl","push","Promise","all","bars","JSON","parse","window","localStorage","getItem","err","onChange","e","name","value","target","length","regEx","match","prevErrors","preventDefault","maxLength","color","map","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport EventsHeader from './EventsHeader';\nimport Navigation from '../Navigation';\nimport SideMenu from '../SideMenu';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nconst useStyles = makeStyles((theme) => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n  }));\nconst Events = () => {\n    // test with zipCode -> cleanUrls with urls array -> promise array with promises containing clean urls\n    // || JSON.parse(window.localStorage.getItem('bars')) !== cleanUrls)\n    const [zipCode, setZipCode] = useState(\"24060\")\n    const [urlData, setUrlData] = useState([]);\n    const [cleanUrls, setCleanUrls] = useState([]);\n    const [zipCodeSave, setZipCodeSave] = useState(false);\n    const [errors, setErrors] = useState({zipcode: \"\"});\n    const classes = useStyles();\n// get urls\n    useEffect(() => {\n        console.log(\"getting url data...\", zipCode)\n        axios.get(\"/test\", {params: { zipCode: zipCode} })\n        .then((response) => {\n            console.log(response.data)\n            setUrlData(response.data)\n        })\n        .catch((error) => {\n            console.log(error);\n        })\n        //#endregion        \n        let urls = []\n        console.log(\"cleaning urls\");\n        for(const url of urlData){\n            let data = cleanUrl(url);\n            if(data != null){\n                urls.push(data);\n            }\n        }\n        Promise.all(urls).then((response) => {\n            setCleanUrls(response);\n            console.log(response, cleanUrls);\n            let bars = JSON.parse(window.localStorage.getItem('bars'));\n            //console.log(JSON.parse(window.localStorage.getItem('bars')), response);\n            // if( bars === null || bars === undefined || bars.length == 0) {\n            //    // console.log(response);\n            //     window.localStorage.setItem('bars', JSON.stringify(response));\n            //     //console.log(window.localStorage.getItem('bars') );\n            // }\n            // if(response.length > 0 && response !== bars) {\n            //     console.log(response);\n            //     window.localStorage.removeItem('bars');\n            //     window.localStorage.setItem('bars', JSON.stringify(response));\n            // }\n            \n\n        }).catch(err => {\n            console.log(err);\n        })\n\n\n    }, [zipCode])\n    // clean them \n    const cleanUrl = async (url) => {\n        const response = await  axios.get(\"/cleanUrl\", {params: { url: url } });\n        const data = await response.data;\n        return data;\n\n    }\n    const onChange = (e) => {\n        const { name, value } = e.target;\n        setZipCodeSave(false);\n        if(name === \"zipcode\"){\n            if(value.length  === 5){\n                const regEx = /^[0-9]{5}$/;\n                if(value.match(regEx)){\n                    console.log(value);\n                    setZipCode(value);\n                    setErrors(prevErrors => ({ ...prevErrors, zipCode: \"\" }));\n                }\n                else{\n                    setErrors(prevErrors => ({ ...prevErrors, zipCode: \"Zipcode must be 5 digits\" }));\n                }\n            }\n        }\n    }\n    // store all clean urls using cleanUrl()\n    // useEffect(() => {\n    //     let urls = []\n    //     console.log(\"cleaning urls\");\n    //     for(const url of urlData){\n    //         let data = cleanUrl(url);\n    //         if(data != null){\n    //             urls.push(data);\n    //         }\n    //     }\n    //     Promise.all(urls).then((response) => {\n    //         setCleanUrls(response);\n    //         console.log(response, cleanUrls);\n    //         let bars = JSON.parse(window.localStorage.getItem('bars'));\n    //         //console.log(JSON.parse(window.localStorage.getItem('bars')), response);\n    //         // if( bars === null || bars === undefined || bars.length == 0) {\n    //         //    // console.log(response);\n    //         //     window.localStorage.setItem('bars', JSON.stringify(response));\n    //         //     //console.log(window.localStorage.getItem('bars') );\n    //         // }\n    //         // if(response.length > 0 && response !== bars) {\n    //         //     console.log(response);\n    //         //     window.localStorage.removeItem('bars');\n    //         //     window.localStorage.setItem('bars', JSON.stringify(response));\n    //         // }\n            \n\n    //     }).catch(err => {\n    //         console.log(err);\n    //     })\n\n\n    // }, [urlData])\n\n\n    return (\n        <div>\n            <Navigation />\n            <EventsHeader />\n            <SideMenu />\n            <div className=\"wineBarsContainer\">\n                        <br />\n                        <form className={classes.root} noValidate autoComplete=\"off\" id=\"zipCodeForm\" onSubmit={e => {e.preventDefault();}}>\n                            <label htmlFor=\"zipcode\">Zipcode</label>\n                                <TextField id=\"outlined-basic\" label={zipCode} variant=\"outlined\" name=\"zipcode\" id=\"zipcode\" placeholder={zipCode}  inputProps={{ maxLength:5 }} onChange={onChange}  />\n                                {(errors.zipcode.length > 0) &&\n                                <p className=\"error\">{errors.zipCode}</p>\n                                }\n                                {/* <div className=\"buttons\">\n                                    <button className=\"button is-info is-light is-medium is-fullwidth\" onClick={updateZipcode}>Update</button>\n                                </div> */}\n                                {zipCodeSave &&\n                                    <span style={{color: \"green\"}}>Zip Code successfully saved.</span>\n                                }\n            \n                        </form>         \n                    </div>\n            <div>\n                { \n   \n                cleanUrls.length === 0 ? \n                <p>Loading...</p> :\n                \n                cleanUrls.map((url, i) => {\n                    return (\n                        <p key={i}>{url}</p>\n                    )\n                }) \n\n                }\n            </div>\n        </div>\n    );\n};\n\nexport default Events;"]},"metadata":{},"sourceType":"module"}